// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: users.sql

package dbgen

import (
	"context"
	"time"
)

const createUser = `-- name: CreateUser :one
INSERT INTO "user" (id, email, password_hash, last_login_at, created_at)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, email, password_hash, last_login_at, created_at
`

type CreateUserParams struct {
	ID           string
	Email        string
	PasswordHash string
	LastLoginAt  time.Time
	CreatedAt    time.Time
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.ID,
		arg.Email,
		arg.PasswordHash,
		arg.LastLoginAt,
		arg.CreatedAt,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.LastLoginAt,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, password_hash, last_login_at, created_at FROM "user" WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.LastLoginAt,
		&i.CreatedAt,
	)
	return i, err
}
